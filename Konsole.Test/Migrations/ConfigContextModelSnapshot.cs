// <auto-generated />
using System;
using Konsole.Test;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Konsole.Test.Migrations
{
    [DbContext(typeof(ConfigContext))]
    partial class ConfigContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("Konsole.Test.SantaBlackList", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("SantaBlackList");
                });

            modelBuilder.Entity("Konsole.Test.SantaWhiteList", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("SantaWhiteList");
                });

            modelBuilder.Entity("Konsole.Test.SecretSantaModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BlackListID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ChoiseID")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ConfigModelID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MailAdress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WhiteListID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("BlackListID");

                    b.HasIndex("ChoiseID");

                    b.HasIndex("ConfigModelID");

                    b.HasIndex("WhiteListID");

                    b.ToTable("SecretSantaModel");
                });

            modelBuilder.Entity("WichtelGenerator.Core.Configuration.ConfigModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Absender")
                        .HasColumnType("TEXT");

                    b.Property<int>("FontSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MailNotificationEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotificationsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Passwort")
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServerName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SslOn")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("ConfigModels");
                });

            modelBuilder.Entity("WichtelGenerator.Core.Configuration.MailAdressModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConfigModelID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mail")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ConfigModelID");

                    b.ToTable("MailAdressModel");
                });

            modelBuilder.Entity("Konsole.Test.SecretSantaModel", b =>
                {
                    b.HasOne("Konsole.Test.SantaBlackList", "BlackList")
                        .WithMany("BlackList")
                        .HasForeignKey("BlackListID");

                    b.HasOne("Konsole.Test.SecretSantaModel", "Choise")
                        .WithMany()
                        .HasForeignKey("ChoiseID");

                    b.HasOne("WichtelGenerator.Core.Configuration.ConfigModel", null)
                        .WithMany("SecretSantaModels")
                        .HasForeignKey("ConfigModelID");

                    b.HasOne("Konsole.Test.SantaWhiteList", "WhiteList")
                        .WithMany("WhiteList")
                        .HasForeignKey("WhiteListID");

                    b.Navigation("BlackList");

                    b.Navigation("Choise");

                    b.Navigation("WhiteList");
                });

            modelBuilder.Entity("WichtelGenerator.Core.Configuration.MailAdressModel", b =>
                {
                    b.HasOne("WichtelGenerator.Core.Configuration.ConfigModel", null)
                        .WithMany("EmpfaengerListe")
                        .HasForeignKey("ConfigModelID");
                });

            modelBuilder.Entity("Konsole.Test.SantaBlackList", b =>
                {
                    b.Navigation("BlackList");
                });

            modelBuilder.Entity("Konsole.Test.SantaWhiteList", b =>
                {
                    b.Navigation("WhiteList");
                });

            modelBuilder.Entity("WichtelGenerator.Core.Configuration.ConfigModel", b =>
                {
                    b.Navigation("EmpfaengerListe");

                    b.Navigation("SecretSantaModels");
                });
#pragma warning restore 612, 618
        }
    }
}
